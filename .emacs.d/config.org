* package manager
** melpa
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  ;(add-to-list 'package-archives
  ;			 '("melpa" . "https://melpa.org/packages/"))
  ;


  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
					  (not (gnutls-available-p))))
		 (proto (if no-ssl "http" "https")))
	(when no-ssl
	  (warn "\
  Your version of Emacs does not support SSL connections,
  which is unsafe because it allows man-in-the-middle attacks.
  There are two things you can do about this warning:
  1. Install an Emacs version that does support SSL and be safe.
  2. Remove this warning from your init file so you won't see it again."))
	;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
	(add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
	;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
	(when (< emacs-major-version 24)
	  ;; For important compatibility libraries like cl-lib
	  (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))

  (package-initialize)



#+END_SRC
** use-package
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'use-package))
  ;(use-package auto-package-update
  ;  :config
  ;  (setq auto-package-update-delete-old-versions t)
  ;  (setq auto-package-update-hide-results t)
  ;  (auto-package-update-maybe))
#+END_SRC


* notes
** editing
*** insert code block
<s (Tab)
*** edit code block in seperate window
C-c '
** formatting
*bold* /italic/ +thing+ =s=

* small configs
** smooth scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-step 1)
#+END_SRC
** remove startup page
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC
** turn bell off
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** line numbers
#+BEGIN_SRC emacs-lisp
  (when (version<= "26.0.50" emacs-version )
	(global-display-line-numbers-mode))
#+END_SRC
** remove dumb autoreindent
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'electric-indent-mode)
    (electric-indent-mode -1))
#+END_SRC
** restore buffers
#+BEGIN_SRC emacs-lisp
  (desktop-save-mode 1)
#+END_SRC
* dashboard (proper startup page)
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 2)
    (setq dashboard-items '((recents  . 30)))
  ;			  (bookmarks . 5)
  ;			  (projects . 5)
  ;			  (agenda . 5)
  ;			  (registers . 5)))
  )

#+END_SRC
* tab size
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux")
  (setq tab-always-indent t)
  (setq indent-tabs-mode t)
  (setq c-basic-offset 4)
  (setq tab-width 4)
#+END_SRC

* custom keys
** normal keybindings for copy-paste
*** aka cue mode
#+BEGIN_SRC emacs-lisp
  (setq org-replace-disputed-keys t);;https://www.gnu.org/software/emacs/manual/html_node/org/Conflicts.html
       ;;this is supposed to move org-mode keys somewhere. doesnt work.
  (cua-mode t)
  (setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
  (transient-mark-mode 1) ;; No region when it is not highlighted
  (setq cua-keep-region-after-copy t) ;; Standard Windows behaviour

  (setq org-support-shift-select t) ;;Select text with the arrows
#+END_SRC
** set C-f , C-S-f (for search forwards and backwards)
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-f"))
  (global-unset-key (kbd "C-S-f"))
  (global-set-key (kbd "C-f") 'isearch-forward)
  (define-key isearch-mode-map (kbd "C-f") 'isearch-repeat-forward)
  (global-set-key (kbd "C-S-f") 'isearch-backward)
  (define-key isearch-mode-map (kbd "C-S-f") 'isearch-repeat-backward)
#+END_SRC
** set C-s , C-o
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-s"))
  (global-unset-key (kbd "C-S-s"))
  (global-unset-key (kbd "C-o"))

  (global-set-key (kbd "C-s") 'save-buffer)

  (global-set-key (kbd "C-o") 'find-file)

  (defadvice find-file-read-args (around find-file-read-args-always-use-dialog-box act)
	"Simulate invoking menu item as if by the mouse; see `use-dialog-box'."
	(let ((last-nonmenu-event nil))
	  ad-do-it))
#+END_SRC

** set C-M-f to replace regex
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-M-f"))
  (global-set-key (kbd "C-M-f") 'query-replace-regexp)
#+END_SRC
* theme - custom colors
** monokai
#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :ensure t
    :config (load-theme 'monokai t)
  )
#+END_SRC
* beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
      (beacon-mode 1))
#+END_SRC
* avy
_avy- find shit based on chars_
_best used with caps-ctrl_
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("C-'" . 'avy-goto-char))
#+END_SRC
* multi cursor
#+BEGIN_SRC emacs-lisp
    ;  (use-package mark-multiple
    ;    :ensure t
    ;    :bind ("C->" . 'mark-next-like-this))
  ;  (use-package 'multiple-cursors-mode
   ;   :ensure t
  ;    :bind (("C->" . 'mc/mark-next-like-this) .
   ;          ("C-<" . 'mc/mark-previous-like-this)))
  (use-package multiple-cursors
    :ensure t
    :bind
    ("C->" . 'mc/mark-next-like-this)
    ("C-<" . 'mc/mark-previous-like-this))
#+END_SRC
* window managing

** setup for tabs
*** close tab
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-w"))
  (global-set-key (kbd "C-w") 'delete-window) ; close window (or "tab")
#+END_SRC
*** split window right
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-\\" ))
  (global-set-key (kbd "C-\\") 'split-window-right)

  ;other-window
  (global-unset-key (kbd "<C-tab>"))
  (global-set-key (kbd "<C-tab>") 'next-multiframe-window)
  (define-key org-mode-map (kbd "<C-tab>") 'next-multiframe-window)

  (global-unset-key (kbd "<C-iso-lefttab>")) ; shift-tab
  (global-set-key (kbd "<C-iso-lefttab>") 'previous-multiframe-window)
#+END_SRC
* tab
*it is disabled*
#+BEGIN_SRC emacs-lisp
;  (use-package centaur-tabs
;    :demand
;    :config
;    (centaur-tabs-mode t)
;    :bind
;    ("C-<tab>" . centaur-tabs-backward)
;    ("C-S-<tab>" . centaur-tabs-forward))
#+END_SRC
* custom indentation
** python
*this assumes spaces only*
defining a func that does the newline
#+BEGIN_SRC emacs-lisp
  (defun my-newline ()
    "This gets down a line and keeps indentation. assumes spaces."
    (interactive)
    (let ((x
	   (save-excursion
	     (forward-line 0)
	     (-(-
		(point)
		(cdr (cons (back-to-indentation) (point) )))))))
      (newline)
      (insert-char ?\s x)))

  (defun my-python-newline ()
    "check char, do shit, then call check-colon on it"
    (interactive)
    (if (eq 0 (buffer-size (current-buffer)))
	(newline)
      (backward-char)
      (let ((x (char-after)))
	(forward-char)
	(my-newline)
	(insert-char ?\s (if (equal x ?:)
			     4
			   0)
		     ))))
#+END_SRC
binding to Enter in python mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook
	    (lambda ()
	      (local-set-key (kbd "<return>")  'my-python-newline)
	      (setq python-indent 4) ) )
  (setq python-shell-interpreter "python3")
  ;(define-key python-mode-map (kbd "<return>") 'my-newline)
  ;  (define-key global-map (kbd "<return>") 'my-newline)
#+END_SRC

#+RESULTS:
| t | (lambda nil (local-set-key (kbd <return>) (quote my-python-newline))) |

* auto complete company
** setup company (disabled)
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 2)
    (define-key company-active-map (kbd "<tab>") #'company-select-next)
    (define-key company-active-map (kbd "<backtab>") #'company-select-previous)
    (add-hook 'emacs-lisp-mode-hook 'company-mode)
    ;same as S-tab
  )
#+END_SRC
** irony (C/C++) (disabled)
#+BEGIN_SRC emacs-lisp
  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony)
  )

  (use-package irony 
    :ensure t
    :config
    ;add c and c++ to it
  ;  (add-hook 'c++-mode-hook 'irony-mode)
  ;  (add-hook 'c-mode-hook 'irony-mode)
    ; start the clang server
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode)
  )
#+END_SRC
** python (incomplete)
#+BEGIN_SRC emacs-lisp
  (use-package company-anaconda
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-anaconda)
    (add-hook 'python-mode-hook 'anaconda-mode)
  )
#+END_SRC

* syntax checking flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :hook (after-init-hook . global-flycheck-mode))

#+END_SRC
* vhdl setup
#+BEGIN_SRC emacs-lisp
  (use-package vhdl-mode
    :ensure t
    :bind
    ("C-/" . 'vhdl-comment-uncomment-region))

#+END_SRC
* Rust setup
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :hook (rust-mode-hook . (lambda () (setq indent-tabs-mode nil)))
    :bind (:map rust-mode-map
		("C-c C-c" . rust-run)))

#+END_SRC
* speedbar
#+BEGIN_SRC emacs-lisp
  (define-key company-active-map (kbd "<delete>") 'speedbar-item-delete)
  (global-set-key (kbd "C-b") 'speedbar)
#+END_SRC
* LaTeX setup
#+BEGIN_SRC emacs-lisp
  (use-package tex-mode
    :ensure t
    :bind
    ("M-C" . 'toggle-input-method))
  ;latex-mode-map
#+END_SRC
