
* notes
** editing
*** insert code block
<s (Tab)
*** edit code block in seperate window
C-c '
** formatting
*bold* /italic/ +thing+ =s=

* small configs
** turn bell off
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** line numbers
#+BEGIN_SRC emacs-lisp
  (when (version<= "26.0.50" emacs-version )
	(global-display-line-numbers-mode))
#+END_SRC
* tab size
#+BEGIN_SRC emacs-lisp
    (setq c-default-style "linux")
    (setq-default tab-always-indent t)
    (setq-default indent-tabs-mode t)
    (setq-default c-basic-offset 4)
    (setq-default tab-width 4)
#+END_SRC

* custom keys
** normal keybindings for copy-paste
*** aka cue mode
#+BEGIN_SRC emacs-lisp
	(setq org-replace-disputed-keys t);;https://www.gnu.org/software/emacs/manual/html_node/org/Conflicts.html
	 ;;this is supposed to move org-mode keys somewhere. doesnt work.
    (cua-mode t)
    (setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
    (transient-mark-mode 1) ;; No region when it is not highlighted
    (setq cua-keep-region-after-copy t) ;; Standard Windows behaviour

	(setq org-support-shift-select t) ;;Select text with the arrows
#+END_SRC
** set C-f , C-S-f (for search forwards and backwards)
#+BEGIN_SRC emacs-lisp
    (global-unset-key (kbd "C-f"))
	(global-unset-key (kbd "C-S-f"))
    (global-set-key (kbd "C-f") 'isearch-forward)
	(define-key isearch-mode-map (kbd "C-f") 'isearch-repeat-forward)
	(global-set-key (kbd "C-S-f") 'isearch-backward)
	(define-key isearch-mode-map (kbd "C-S-f") 'isearch-repeat-backward)
#+END_SRC
** set C-s , C-o
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-s"))
  (global-unset-key (kbd "C-S-s"))
  (global-unset-key (kbd "C-o"))

  (global-set-key (kbd "C-s") 'save-buffer)

  (global-set-key (kbd "C-o") 'find-file)

  (defadvice find-file-read-args (around find-file-read-args-always-use-dialog-box act)
	"Simulate invoking menu item as if by the mouse; see `use-dialog-box'."
	(let ((last-nonmenu-event nil))
	  ad-do-it))
#+END_SRC

* setup package manager
** melpa
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  ;(add-to-list 'package-archives
  ;			 '("melpa" . "https://melpa.org/packages/"))
  ;
	
	
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
					  (not (gnutls-available-p))))
		 (proto (if no-ssl "http" "https")))
	(when no-ssl
	  (warn "\
  Your version of Emacs does not support SSL connections,
  which is unsafe because it allows man-in-the-middle attacks.
  There are two things you can do about this warning:
  1. Install an Emacs version that does support SSL and be safe.
  2. Remove this warning from your init file so you won't see it again."))
	;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
	(add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
	;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
	(when (< emacs-major-version 24)
	  ;; For important compatibility libraries like cl-lib
	  (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
	
  (package-initialize)



#+END_SRC
* theme - custom colors
** monokai
#+BEGIN_SRC emacs-lisp
  (load-theme 'monokai t)
#+END_SRC
* avy
_avy- find shit based on chars_
_best used with caps-ctrl_
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-/"))
  (global-set-key (kbd "C-/") 'avy-goto-char)
#+END_SRC
* window managing
** setup for tabs
*** close tab
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-w"))
  (global-set-key (kbd "C-w") 'delete-window) ; close window (or "tab")
#+END_SRC
*** split window right
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-\\" ))
(global-set-key (kbd "C-\\") 'split-window-right)

;other-window
(global-unset-key (kbd "<C-tab>"))
(global-set-key (kbd "<C-tab>") 'other-window)
(define-key org-mode-map (kbd "<C-tab>") 'other-window)

#+END_SRC
